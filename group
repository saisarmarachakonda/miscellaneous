
# Generate all unique pairs from each row
pair_counts = Counter()
for group in df['employer_name']:
    for pair in combinations(sorted(set(group)), 2):  # Ensure pairs are unique and ordered
        pair_counts[pair] += 1

# Filter pairs that appear more than once
repeated_pairs = [pair for pair, count in pair_counts.items() if count > 1]

# Union-Find (Disjoint Set) implementation to group connected names
parent = {}

def find(x):
    if parent[x] != x:
        parent[x] = find(parent[x])
    return parent[x]

def union(x, y):
    root_x = find(x)
    root_y = find(y)
    if root_x != root_y:
        parent[root_y] = root_x

# Initialize parent for each unique name
all_names = set([name for pair in repeated_pairs for name in pair])
for name in all_names:
    parent[name] = name

# Union pairs
for name1, name2 in repeated_pairs:
    union(name1, name2)

# Group names by their root parent
groups = defaultdict(list)
for name in all_names:
    root = find(name)
    groups[root].append(name)

# Convert to list of groups
grouped_repeated_names = list(groups.values())





threshold = 0.8

# Filter rows with score above the threshold
filtered_df = latest[latest["score"] >= threshold]

# Initialize empty groups
groups = []

# Dynamically create and merge groups using list comprehension
[
    groups.append(group) if not any(group & existing_group for existing_group in groups)
    else next(existing_group.update(group) for existing_group in groups if group & existing_group)
    for group in [set(pair) for pair in zip(filtered_df["employer_name_x"], filtered_df["employer_name_y"])]
]

# Assign group IDs
group_mapping = {
    name: idx + 1
    for idx, group in enumerate(groups)
    for name in group
}

print(group_mapping)


threshold = 0.85
groups = []

# Dynamic group creation
for _, row in data.iterrows():
    added = False
    for group in groups:
        # Check if either name is already in the group
        if row["Name 1"] in group or row["Name 2"] in group:
            if row["Score"] >= threshold:
                group.update([row["Name 1"], row["Name 2"]])
                added = True
                break
    # If neither name was added to an existing group, create a new group
    if not added and row["Score"] >= threshold:
        groups.append(set([row["Name 1"], row["Name 2"]]))

# Assign group IDs
group_mapping = {name: idx + 1 for idx, group in enumerate(groups) for name in group}

# Create a DataFrame for group assignments
group_df = pd.DataFrame(group_mapping.items(), columns=["Name", "Group ID"])
